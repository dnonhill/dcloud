---
apiVersion: apps/v1     # for k8s v.1.9+
kind: Deployment
metadata:
  name: {{ include "app-deployment.fullname" . }}       # deployment name (. mean local var)
  labels:
    app: {{ include "app-deployment.name" . }}
    helm.sh/chart: {{ include "app-deployment.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount | default 1 }}
  selector:
    matchLabels:
      app: {{ include "app-deployment.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  {{- with .Values.strategy }}
  strategy:
    {{- . | toYaml | nindent 4 }}
  {{- end }}

  template:
    metadata:
      labels:
        app: {{ include "app-deployment.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
        timestamp: "{{ date "20060102150405" .Release.Time }}"
    spec:
      {{- if .Values.securityContext }}
      {{- if .Values.securityContext.runAsUser }}
      securityContext:
        runAsUser: {{ .Values.securityContext.runAsUser }}
      {{- end }}
      {{- end }}
      {{- if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
      {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- range .Values.imagePullSecrets }}
        - name: {{ .name }}
        {{- end }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds | default 30 }}
      containers:
        - name: {{ include "app-deployment.name" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | quote | default "IfNotPresent" }}
          {{- if .Values.workingDir }}
          workingDir: {{ .Values.workingDir }}
          {{- end }}
          {{- if .Values.command }}
          command:
            {{- range .Values.command }}
            - {{ . }}
            {{- end }}
          {{- end }}
          {{- if .Values.args }}
          args:
            {{- range .Values.args }}
            - {{ . }}
            {{- end }}
          {{- end }}
          {{- if .Values.env }}
          env:
            # env_sample
            # env:
            # - name: variable01
            #   secret:
            #     name: secret01
            #     key: secretKey01
            # - name: variable02
            #   configmap:
            #     name: configmap02 (use app's fullname if not defined)
            #     key: configmapKey02
            # - name: variable03
            #   value: value03
            {{- range .Values.env }}
            - name: {{ .name }}
              {{- if .secret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .secret.name }}
                  key: {{ .secret.key }}
              {{- else if .configmap }}
              valueFrom:
                configMapKeyRef:
                  name: {{ .configmap.name | default (include "app-deployment.fullname" $) }}
                  key: {{ .configmap.key }}
              {{- else }}
              value: {{ .value | quote }}
              {{- end }}
            {{- end }}
          {{- end }}
          {{- if .Values.envFrom }}
          envFrom:
            # envFrom_sample
            # envFrom:
            # - prefix: PF_ (prefix is optional)
            #   secret:
            #     name: db-secret
            # - configmap:
            #     name: app-configmap (use app's fullname if not defined)
            {{- range .Values.envFrom }}
            - {{ if .secret -}}
              secretRef:
                name: {{ .secret.name }}
              {{ else if .configmap -}}
              configMapRef:
                name: {{ .configmap.name | default (include "app-deployment.fullname" $) }}
              {{- end }}
              {{ if .prefix -}}
              prefix: {{ .prefix | quote }}
              {{- end }}
            {{- end }}
          {{- end }}
          {{- if .Values.containerPorts }}
          ports:
            {{- range .Values.containerPorts }}
            - containerPort: {{ . }}
            {{- end }}
          {{- end }}
          {{- if .Values.healthCheck.enabled }}
          {{- if .Values.healthCheck.readinessProbe }}
          readinessProbe:
            {{- if .Values.healthCheck.readinessProbe.httpGet }}
            httpGet:
              path: {{ .Values.healthCheck.readinessProbe.httpGet.path }}
              port: {{ .Values.healthCheck.readinessProbe.httpGet.port }}
            {{- else if .Values.healthCheck.readinessProbe.tcpSocket }}
            tcpSocket:
              port: {{ .Values.healthCheck.readinessProbe.tcpSocket.port }}
            {{- else if .Values.healthCheck.readinessProbe.exec }}
            command:
              {{- range .Values.healthCheck.readinessProbe.exec.command }}
              - {{ . }}
              {{- end }}
            {{- end }}
            initialDelaySeconds: {{ .Values.healthCheck.readinessProbe.initialDelaySeconds | default 0 }}
            timeoutSeconds: {{ .Values.healthCheck.readinessProbe.timeoutSeconds | default 1 }}
            periodSeconds: {{ .Values.healthCheck.readinessProbe.periodSeconds | default 10 }}
            successThreshold: {{ .Values.healthCheck.readinessProbe.successThreshold | default 1 }}
            failureThreshold: {{ .Values.healthCheck.readinessProbe.failureThreshold | default 3 }}
          {{- end }}
          {{- if .Values.healthCheck.livenessProbe }}
          livenessProbe:
            {{- if .Values.healthCheck.livenessProbe.httpGet }}
            httpGet:
              path: {{ .Values.healthCheck.livenessProbe.httpGet.path }}
              port: {{ .Values.healthCheck.livenessProbe.httpGet.port }}
            {{- else if .Values.healthCheck.livenessProbe.tcpSocket }}
            tcpSocket:
              port: {{ .Values.healthCheck.livenessProbe.tcpSocket.port }}
            {{- else if .Values.healthCheck.livenessProbe.exec }}
            exec:
              command:
                {{- range .Values.healthCheck.livenessProbe.exec.command }}
                - {{ . }}
                {{- end }}
            {{- end }}
            initialDelaySeconds: {{ .Values.healthCheck.livenessProbe.initialDelaySeconds | default 0 }}
            timeoutSeconds: {{ .Values.healthCheck.livenessProbe.timeoutSeconds | default 1 }}
            periodSeconds: {{ .Values.healthCheck.livenessProbe.periodSeconds | default 10 }}
            successThreshold: {{ .Values.healthCheck.livenessProbe.successThreshold | default 1 }}
            failureThreshold: {{ .Values.healthCheck.livenessProbe.failureThreshold | default 3 }}
          {{- end }}
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          {{- if .Values.volumeMounts }}
          volumeMounts:
            {{- range .Values.volumeMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              {{- if .subPath }}
              subPath: {{ .subPath }}
              {{- end }}
              {{- if .readOnly }}
              readOnly: {{ .readOnly }}
              {{- end }}
            {{- end }}
          {{- end }}
        # Auth start
        {{- range .Values.sidecarContainers }}
        - name: {{ .name }}
          image: "{{ .image.repository }}:{{ .image.tag }}"
          imagePullPolicy: {{ .image.pullPolicy | quote | default "IfNotPresent" }}
          {{- if .workingDir }}
          workingDir: {{ .workingDir }}
          {{- end }}
          {{- if .command }}
          command:
            {{- range .command }}
            - {{ . }}
            {{- end }}
          {{- end }}
          {{- if .args }}
          args:
            {{- range .args }}
            - {{ . }}
            {{- end }}
          {{- end }}
          {{- if .env }}
          env:
            # env_sample
            # env:
            # - name: variable01
            #   secret:
            #     name: secret01
            #     key: secretKey01
            # - name: variable02
            #   configmap:
            #     name: configmap02 (use app's fullname if not defined)
            #     key: configmapKey02
            # - name: variable03
            #   value: value03
            {{- range .env }}
            - name: {{ .name }}
              {{- if .secret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .secret.name }}
                  key: {{ .secret.key }}
              {{- else if .configmap }}
              valueFrom:
                configMapKeyRef:
                  name: {{ .configmap.name | default (include "app-deployment.fullname" $) }}
                  key: {{ .configmap.key }}
              {{- else }}
              value: {{ .value | quote }}
              {{- end }}
            {{- end }}
          {{- end }}
          {{- if .envFrom }}
          envFrom:
            # envFrom_sample
            # envFrom:
            # - prefix: PF_ (prefix is optional)
            #   secret:
            #     name: db-secret
            # - configmap:
            #     name: app-configmap (use app's fullname if not defined)
            {{- range .envFrom }}
            - {{ if .secret -}}
              secretRef:
                name: {{ .secret.name }}
              {{ else if .configmap -}}
              configMapRef:
                name: {{ .configmap.name | default (include "app-deployment.fullname" $) }}
              {{- end }}
              {{ if .prefix -}}
              prefix: {{ .prefix | quote }}
              {{- end }}
            {{- end }}
          {{- end }}
          {{- if .containerPorts }}
          ports:
            {{- range .containerPorts }}
            - containerPort: {{ . }}
            {{- end }}
          {{- end }}
          {{- if .healthCheck }}
          {{- if .healthCheck.enabled }}
          {{- if .healthCheck.readinessProbe }}
          readinessProbe:
            {{- if .healthCheck.readinessProbe.httpGet }}
            httpGet:
              path: {{ .healthCheck.readinessProbe.httpGet.path }}
              port: {{ .healthCheck.readinessProbe.httpGet.port }}
            {{- else if .healthCheck.readinessProbe.tcpSocket }}
            tcpSocket:
              port: {{ .healthCheck.readinessProbe.tcpSocket.port }}
            {{- else if .healthCheck.readinessProbe.exec }}
            command:
              {{- range .healthCheck.readinessProbe.exec.command }}
              - {{ . }}
              {{- end }}
            {{- end }}
            initialDelaySeconds: {{ .healthCheck.readinessProbe.initialDelaySeconds | default 0 }}
            timeoutSeconds: {{ .healthCheck.readinessProbe.timeoutSeconds | default 1 }}
            periodSeconds: {{ .healthCheck.readinessProbe.periodSeconds | default 10 }}
            successThreshold: {{ .healthCheck.readinessProbe.successThreshold | default 1 }}
            failureThreshold: {{ .healthCheck.readinessProbe.failureThreshold | default 3 }}
          {{- end }}
          {{- if .healthCheck.livenessProbe }}
          livenessProbe:
            {{- if .healthCheck.livenessProbe.httpGet }}
            httpGet:
              path: {{ .healthCheck.livenessProbe.httpGet.path }}
              port: {{ .healthCheck.livenessProbe.httpGet.port }}
            {{- else if .healthCheck.livenessProbe.tcpSocket }}
            tcpSocket:
              port: {{ .healthCheck.livenessProbe.tcpSocket.port }}
            {{- else if .healthCheck.livenessProbe.exec }}
            command:
              {{- range .healthCheck.livenessProbe.exec.command }}
              - {{ . }}
              {{- end }}
            {{- end }}
            initialDelaySeconds: {{ .healthCheck.livenessProbe.initialDelaySeconds | default 0 }}
            timeoutSeconds: {{ .healthCheck.livenessProbe.timeoutSeconds | default 1 }}
            periodSeconds: {{ .healthCheck.livenessProbe.periodSeconds | default 10 }}
            successThreshold: {{ .healthCheck.livenessProbe.successThreshold | default 1 }}
            failureThreshold: {{ .healthCheck.livenessProbe.failureThreshold | default 3 }}
          {{- end }}
          {{- end }}
          {{- end }}
          resources:
{{ toYaml .resources | indent 12 }}
          {{- if .volumeMounts }}
          volumeMounts:
            {{- range .volumeMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              {{- if .subPath }}
              subPath: {{ .subPath }}
              {{- end }}
              {{- if .readOnly }}
              readOnly: {{ .readOnly }}
              {{- end }}
            {{- end }}
          {{- end }}
        {{- end }}
      {{- if .Values.volumes }}
      volumes:
        {{- range .Values.volumes }}
        - name: {{ .name }}
          {{- if .hostPath }}
          hostPath:
            path: {{ .hostPath }}
          {{- else if .configMap }}
          configMap:
            name: {{ .configMap.name }}
            items:
              {{- range .configMap.items }}
              - key: {{ .key }}
                path: {{ .path }}
              {{- end }}
          {{- else if .persistentVolumeClaim }}
          persistentVolumeClaim:
            claimName: {{ .persistentVolumeClaim.claimName }}
          {{- else if .nfs }}
          nfs:
            path: {{ .nfs.path }}
            readOnly: {{ .nfs.readOnly }}
            server: {{ .nfs.server }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- end }}
      {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}