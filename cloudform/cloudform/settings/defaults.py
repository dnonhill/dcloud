"""
Django settings for service project.

Generated by 'django-admin startproject' using Django 2.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import json
from collections import defaultdict
from datetime import timedelta

import ldap
from django_auth_ldap.config import LDAPSearch, LDAPGroupQuery

from cloudform.users.auth_ldap import MappingGroupOfNamesType


def get_dcloud_settings():
    settings = defaultdict(str)

    force_secure = (
        os.environ.get("DCLOUD_FORCE_SECURE_REQUEST", "False").lower() == "true"
    )
    settings["force_secure"] = force_secure

    return settings


def get_email_settings():
    """Read email settings from environ variables"""
    enabled = os.environ.get("EMAIL_ENABLED", "True").lower() == "true"
    if not enabled:
        return enabled, dict()

    settings = defaultdict(str)

    backend = os.environ.get("EMAIL_BACKEND", "smtp")
    backend = backend.lower()

    if backend == "smtp":
        # assert (
        #     "EMAIL_HOST_USER" in os.environ and "EMAIL_HOST_PASSWORD" in os.environ
        # ), "SMTP backend requires user and password"

        settings = {
            "host": os.environ.get("EMAIL_HOST", "pronto-core-elb-tcp-b863a26714915dff.elb.eu-west-1.amazonaws.com"),
            "port": os.environ.get("EMAIL_PORT", "2525"),
            "user": os.environ.get("EMAIL_HOST_USER", "prontomarketing/margomusto"),
            "password": os.environ.get("EMAIL_HOST_PASSWORD", "ICWWqi3BIyDq3IKSRAQgdAEG"),
        }
    settings["backend"] = f"django.core.mail.backends.{backend}.EmailBackend"

    return enabled, settings


def get_redis_settings():
    """Read redis settings from environ variables"""

    def host_port(host_str):
        if ":" in host_str:
            host, port = host_str.split(":")
            return host, int(port)
        return host_str, 6379

    enabled = os.environ.get("REDIS_ENABLED", "True").lower() == "true"
    hosts = os.environ.get("REDIS_HOSTS", "localhost:6379")
    hosts = hosts.strip().split()
    hosts = [host_port(host) for host in hosts]

    settings = {"hosts": hosts}

    return enabled, settings


def get_ldap_settings():
    """Read LDAP settings from environment variables"""
    enabled = os.environ.get("AUTH_LDAP_ENABLED", "False").lower() == "true"
    if not enabled:
        return enabled, dict()
    settings = defaultdict(str)
    settings["server_uri"] = os.environ.get(
        "AUTH_LDAP_SERVER_URI", "ldap://localhost:10389"
    )
    settings["start_tls"] = (
        os.environ.get("AUTH_LDAP_START_TLS", "False").lower() == "true"
    )

    settings["bind_dn"] = os.environ.get("AUTH_LDAP_BIND_DN", "uid=admin,ou=system")
    settings["bind_password"] = os.environ.get("AUTH_LDAP_BIND_PASSWORD", "secret")

    settings["user_search_base_dn"] = os.environ.get(
        "AUTH_LDAP_USER_SEARCH_BASE_DN", "ou=system"
    )
    settings["user_search_filter_str"] = os.environ.get(
        "AUTH_LDAP_USER_SEARCH_FILTER_STR", "(mail=%(user)s)"
    )
    settings["approver_search_filter_str"] = os.environ.get(
        "AUTH_LDAP_APPROVER_SEARCH_FILTER_STR", settings["user_search_filter_str"]
    )
    settings["reviewer_search_filter_str"] = os.environ.get(
        "AUTH_LDAP_REVIEWER_SEARCH_FILTER_STR", settings["user_search_filter_str"]
    )

    settings["group_search_base_dn"] = os.environ.get(
        "AUTH_LDAP_GROUP_SEARCH_BASE_DN", "ou=Groups,dc=example,dc=com"
    )
    settings["group_search_filter_str"] = os.environ.get(
        "AUTH_LDAP_GROUP_SEARCH_FILTER_STR", "(objectClass=groupOfNames)"
    )

    settings["user_flag_by_group_is_staff"] = os.environ.get(
        "AUTH_LDAP_USER_FLAGS_BY_GROUP_IS_STAFF", ""
    )

    settings["group_map"] = json.loads(
        os.environ.get(
            "AUTH_LDAP_GROUP_MAP", '{"approver": "approver", "owner": "requestor", "reviewer": "reviewer"}'
        )
    )

    return enabled, settings


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "qdy_iebc5z0b)w90a@c8_s(l6o*z^unr%tdg=5rnrt67z$)rfd"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG_MODE", "").lower() == "true"

# DEBUG mode for client javascript
CLIENT_DEBUG = DEBUG

SITE_ID = 1

ALLOWED_HOSTS = ["*"]
CORS_ORIGIN_ALLOW_ALL = (
    os.environ.get("CORS_ORIGIN_ALLOW_ALL", str(DEBUG)).lower() == "true"
)

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    "django.contrib.sites",
    "rest_framework",
    "django_filters",
    "corsheaders",
    "django_extensions",
    "django_celery_beat",
    "django.contrib.humanize",
    "channels",
    "ckeditor",
    "zouth",
    "zouth.sequence",
    "cloudform.login",
    "cloudform.users",
    "cloudform.projects",
    "cloudform.tickets",
    "cloudform.tasks",
    "cloudform.user_domain",
    "cloudform.mail",
    "cloudform.pricing",
    "cloudform.form_config",
    "cloudform.categorys",
    "cloudform.reviews",
    "cloudform.inventories",
    "django_elasticsearch_dsl",
    "cloudform.jobcodes",
    "cloudform.organizes",
    "cloudform.invoices",
    "cloudform.tags",
    "captcha",
]

NUMBER_OF_ERROR = os.environ.get("NUMBER_OF_ERROR", 2)
ELASTICSEARCH_HOST = os.environ.get("ELASTICSEARCH_HOST", "localhost")
ELASTICSEARCH_PORT = os.environ.get("ELASTICSEARCH_PORT", 9200)
ELASTICSEARCH_DSL_AUTO_REFRESH = False
ELASTICSEARCH_DSL_AUTOSYNC = True
ELASTICSEARCH_DSL_PARALLEL = True

ELASTICSEARCH_DSL = {
    "default": {
        "hosts": f"{ELASTICSEARCH_HOST}:{ELASTICSEARCH_PORT}"
    },
}

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
        "rest_framework.renderers.AdminRenderer",
    ],
    "DEFAULT_FILTER_BACKENDS": (
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.OrderingFilter",
    ),
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    "PAGE_SIZE": 10,
    "EXCEPTION_HANDLER": "zouth.common.views.custom_exception_handler",
}

SIMPLE_JWT = {"ACCESS_TOKEN_LIFETIME": timedelta(minutes=600)}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
]

SESSION_COOKIE_PATH = os.environ.get("SESSION_COOKIE_PATH", "/api/admin/")
CSRF_COOKIE_PATH = os.environ.get("CSRF_COOKIE_PATH", "/api/admin/")

ASGI_APPLICATION = "cloudform.routing.application"

ROOT_URLCONF = "cloudform.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "../templates"),
            os.path.join(BASE_DIR, "../frontend/build"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "cloudform.wsgi.application"

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": os.environ.get("POSTGRES_DB", "cloudform"),
        "USER": os.environ.get("POSTGRES_USER", "postgres"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD", "password"),
        "HOST": os.environ.get("POSTGRES_HOST", "postgres"),
        "PORT": os.environ.get("POSTGRES_PORT", "5432"),
    },
    "ptt-db": {
        "ENGINE": "django.db.backends.oracle",
        "NAME": "GMASP",
        "USER": "SAPIEP3000014",
        "PASSWORD": "4Z9SwVAd",
        "HOST": "10.232.108.221",
        "PORT": "1551",
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]
PASSWORD_RESET_TIMEOUT_DAYS = 1

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

CELERY_BROKER_URL = os.environ.get("REDIS_URL", "redis://localhost:6379")
CELERY_WORKER_CONCURRENCY = 1

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "/api/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "../static")
STATICFILES_DIRS = [os.path.join(BASE_DIR, "../frontend/build/api/static")]

SERIALIZATION_MODULES = {"yaml": "cloudform.pyyaml"}

MEDIA_URL = "/api/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "../media")

ZOUTH_SEQUENCE_INITIAL = 1

SILENCED_SYSTEM_CHECKS = ["rest_framework.W001"]

ldap_enabled, ldap_settings = get_ldap_settings()
AUTH_LDAP_ENABLED = ldap_enabled

CLOUDFORM_AUTHENTICATION_BACKENDS = (
    "cloudform.users.custom_ldap.MultipleLDAPBackend.CustomLDAPBackend",
)

AUTH_USER_MODEL = "users.User"
AUTHENTICATION_BACKENDS = (
    "cloudform.users.custom_ldap.MultipleLDAPBackend.CustomLDAPBackend",
    "django.contrib.auth.backends.ModelBackend",
)

if ldap_enabled:
    DCLOUD_DOMAIN = os.environ.get("DCLOUD_DOMAIN")
    assert (
        DCLOUD_DOMAIN is not None
    ), "must set DCLOUD_DOMAIN. according to domain and endpoint in UserDomain"

    AUTHENTICATION_BACKENDS = (
        CLOUDFORM_AUTHENTICATION_BACKENDS + AUTHENTICATION_BACKENDS
    )

    AUTH_LDAP_CONNECTION_OPTIONS = {ldap.OPT_REFERRALS: 0}  # noqa: F405

    AUTH_LDAP_SERVER_URI = ldap_settings["server_uri"]
    AUTH_LDAP_START_TLS = ldap_settings["start_tls"]

    AUTH_LDAP_BIND_DN = ldap_settings["bind_dn"]
    AUTH_LDAP_BIND_PASSWORD = ldap_settings["bind_password"]

    AUTH_LDAP_USER_SEARCH = LDAPSearch(
        ldap_settings["user_search_base_dn"],
        ldap.SCOPE_SUBTREE,
        ldap_settings["user_search_filter_str"],  # pylint: disable=no-member
    )

    AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
        ldap_settings["group_search_base_dn"],
        ldap.SCOPE_SUBTREE,  # pylint: disable=no-member
        ldap_settings["group_search_filter_str"],
    )

    # This will not change member of group AUTH_LDAP_MIRROR_GROUPS_EXCEPT in django app
    AUTH_LDAP_MIRROR_GROUPS_EXCEPT = ("approver", "reviewer",)

    AUTH_LDAP_GROUP_TYPE = MappingGroupOfNamesType(group_map=ldap_settings["group_map"])

    AUTH_LDAP_USER_ATTR_MAP = {
        "username": "sAMAccountName",
        "first_name": "givenName",
        "last_name": "sn",
        "email": "mail",
        "mobile": "mobile",
        "telephone": "telephone",
        "department": "department",
        "organization": "o",
        "company": "company",
    }

    if ldap_settings["user_flag_by_group_is_staff"]:
        AUTH_LDAP_USER_FLAGS_BY_GROUP = {
            "is_staff": LDAPGroupQuery(ldap_settings["user_flag_by_group_is_staff"])
        }

    approver_attr_list = list(AUTH_LDAP_USER_ATTR_MAP.values())
    AUTH_LDAP_APPROVER_SEARCH = LDAPSearch(
        ldap_settings["user_search_base_dn"],
        ldap.SCOPE_SUBTREE,
        ldap_settings["approver_search_filter_str"],  # pylint: disable=no-member
        approver_attr_list,
    )

    reviewer_attr_list = list(AUTH_LDAP_USER_ATTR_MAP.values())
    AUTH_LDAP_REVIEWER_SEARCH = LDAPSearch(
        ldap_settings["user_search_base_dn"],
        ldap.SCOPE_SUBTREE,
        ldap_settings["reviewer_search_filter_str"],  # pylint: disable=no-member
        reviewer_attr_list,
    )

email_enabled, email_settings = get_email_settings()
if email_enabled:
    EMAIL_BACKEND = email_settings["backend"]
    EMAIL_HOST = email_settings["host"]
    EMAIL_PORT = email_settings["port"]
    EMAIL_HOST_USER = email_settings["user"]
    EMAIL_HOST_PASSWORD = email_settings["password"]

    SENDMAIL_SENDER = os.environ.get("SENDMAIL_SENDER", "pttdigital-cloudadmin@pttdigital.com")
    SENDMAIL_MAX_ATTEMPTS = int(os.environ.get("SENDMAIL_MAX_ATTEMPTS", "3"))

redis_enabled, redis_settings = get_redis_settings()
if redis_enabled:
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {"hosts": redis_settings["hosts"]},
        }
    }

dcloud_settings = get_dcloud_settings()
DCLOUD_FORCE_SECURE_REQUEST = dcloud_settings["force_secure"]

# AWX API hook settings
AWX_API_KEY = os.environ.get("AWX_API_KEY", "Q2XUGsIUS3BktIDaNpV1ZKwokAA9fO")
AWX_API_HOST = os.environ.get("AWX_API_HOST", "https://dcloudawx-uat.pttdigital.com")
AWX_API_URL = os.environ.get("AWX_API_URL", f"{AWX_API_HOST}/api/v2")
AWX_API_HOOK_SECRET = os.environ.get("AWX_API_HOOK_SECRET", "s3cr3t")

DCLOUD_VERSION = os.environ.get("DCLOUD_VERSION", "no environment DCLOUD_VERSION")
DCLOUD_GIT_HASH = os.environ.get("DCLOUD_GIT_HASH", "no environment DCLOUD_GIT_HASH")
DCLOUD_DEPLOY_DATE = os.environ.get(
    "DCLOUD_DEPLOY_DATE", "no environment DCLOUD_DEPLOY_DATE"
)

# External URL for documentation system
DOCS_URL = ""  # Default to /docs path of the same site URL if the configuration is empty or None

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {"format": "{asctime} - {levelname} {name} {message}", "style": "{"}
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "graypy": {
            "class": os.environ.get("GRAYLOG_HANDLER_CLASS", "graypy.GELFUDPHandler"),
            "host": os.environ.get("GRAYLOG_HOST", "localhost"),
            "port": os.environ.get("GRAYLOG_PORT", 12201),
            "formatter": "verbose",
        },
    },
    "loggers": {
        "django": {
            "level": "INFO",
            "handlers": ["console", "graypy"],
            "propagate": True,
        },
        "django.server": {
            "level": "INFO",
            "handlers": ["console", "graypy"],
            "propagate": False,
        },
        "cloudform": {
            "level": "INFO",
            "handlers": ["console", "graypy"],
            "propagate": True,
        },
        "django_auth_ldap": {"level": "DEBUG", "handlers": ["console"]},
    },
}
CKEDITOR_CONFIGS = {
    "minimal": {
        "toolbar": "Custom",
        "toolbar_Custom": [
            ["Bold", "Italic", "Underline"],
            ["Styles", "Format", "FontSize", "TextColor", "BGColor"],
            [
                "Numberlist",
                "BulletedList",
                "-",
                "Outdent",
                "Indent",
                "-",
                "JustifyLeft",
                "JustifyCenter",
                "JustifyRight",
            ],
            ["Link", "Unlink"],
            ["TextColor", "BGColor"],
            ["RemoveFormat", "Source"],
        ],
        "fullPage": True,
    }
}

if os.environ.get("DCLOUD_APPLICATION_MODE", "").lower() == "ldap_change_password":
    INSTALLED_APPS = [
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.messages",
        "django.contrib.staticfiles",
        "django.contrib.postgres",
        "django.contrib.sites",
        "corsheaders",
        "cloudform.users",
        "cloudform.user_domain",
        "captcha"
    ]

    ROOT_URLCONF = "cloudform.users.ldap_change_password_urls"
    ASGI_APPLICATION = "cloudform.users.ldap_change_password_urls.application"
    CAPTCHA_LENGTH = 5
    CAPTCHA_IMAGE_SIZE = (200, 50)
    CAPTCHA_FONT_SIZE = 40
