"""
Django settings for docs project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import json
from collections import defaultdict

import ldap
from django_auth_ldap.config import LDAPSearch, LDAPGroupQuery, NestedGroupOfNamesType

from docs.auth_ldap import MappingGroupOfNamesType


PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(PROJECT_DIR)
PREFIX_PATH = os.environ.get("PREFIX_PATH", "/")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/


# Application definition

INSTALLED_APPS = [
    "help",
    "home",
    "search",
    "wagtail.contrib.forms",
    "wagtail.contrib.redirects",
    "wagtail.embeds",
    "wagtail.sites",
    "wagtail.users",
    "wagtail.snippets",
    "wagtail.documents",
    "wagtail.images",
    "wagtail.search",
    "wagtail.admin",
    "wagtail.core",
    "modelcluster",
    "taggit",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "wagtail.core.middleware.SiteMiddleware",
    "wagtail.contrib.redirects.middleware.RedirectMiddleware",
]

SESSION_COOKIE_PATH = os.environ.get("SESSION_COOKIE_PATH", PREFIX_PATH)
CSRF_COOKIE_PATH = os.environ.get("CSRF_COOKIE_PATH", PREFIX_PATH)

ROOT_URLCONF = "docs.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(PROJECT_DIR, "templates"),],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "docs.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": os.environ.get("POSTGRES_DB", "cloudform_docs"),
        "USER": os.environ.get("POSTGRES_USER", "postgres"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD", "password"),
        "HOST": os.environ.get("POSTGRES_HOST", "postgres"),
        "PORT": os.environ.get("POSTGRES_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator", },
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator", },
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator", },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

STATICFILES_DIRS = [
    os.path.join(PROJECT_DIR, "static"),
]

# ManifestStaticFilesStorage is recommended in production, to prevent outdated
# Javascript / CSS assets being served from cache (e.g. after a Wagtail upgrade).
# See https://docs.djangoproject.com/en/3.0/ref/contrib/staticfiles/#manifeststaticfilesstorage
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"

STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = PREFIX_PATH + \
    ("static/" if PREFIX_PATH.endswith("/") else "/static/")

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = PREFIX_PATH + \
    ("media/" if PREFIX_PATH.endswith("/") else "/media/")


# Wagtail settings

WAGTAIL_SITE_NAME = os.environ.get("WAGTAIL_SITE_NAME", "docs")

# Base URL to use when referring to full URLs within the Wagtail admin backend -
# e.g. in notification emails. Don't include '/admin' or a trailing slash
BASE_URL = os.environ.get("BASE_URL", "http://example.com")


def get_ldap_settings():
    """Read LDAP settings from environment variables"""
    enabled = os.environ.get("AUTH_LDAP_ENABLED", "False").lower() == "true"
    if not enabled:
        return enabled, dict()
    settings = defaultdict(str)
    settings["server_uri"] = os.environ.get(
        "AUTH_LDAP_SERVER_URI", "ldap://localhost:10389"
    )
    settings["start_tls"] = (
        os.environ.get("AUTH_LDAP_START_TLS", "False").lower() == "true"
    )

    settings["bind_dn"] = os.environ.get(
        "AUTH_LDAP_BIND_DN", "uid=admin,ou=system")
    settings["bind_password"] = os.environ.get(
        "AUTH_LDAP_BIND_PASSWORD", "secret")

    settings["user_search_base_dn"] = os.environ.get(
        "AUTH_LDAP_USER_SEARCH_BASE_DN", "ou=system"
    )
    settings["user_search_filter_str"] = os.environ.get(
        "AUTH_LDAP_USER_SEARCH_FILTER_STR", "(mail=%(user)s)"
    )

    settings["group_search_base_dn"] = os.environ.get(
        "AUTH_LDAP_GROUP_SEARCH_BASE_DN", "ou=Groups,dc=example,dc=com"
    )
    settings["group_search_filter_str"] = os.environ.get(
        "AUTH_LDAP_GROUP_SEARCH_FILTER_STR", "(objectClass=groupOfNames)"
    )

    settings["user_flag_by_group_is_staff"] = os.environ.get(
        "AUTH_LDAP_USER_FLAGS_BY_GROUP_IS_STAFF", ""
    )

    return enabled, settings


AUTHENTICATION_BACKENDS = ["django.contrib.auth.backends.ModelBackend"]

ldap_enabled, ldap_settings = get_ldap_settings()
AUTH_LDAP_ENABLED = ldap_enabled

if ldap_enabled:
    AUTHENTICATION_BACKENDS = [
        "django_auth_ldap.backend.LDAPBackend"
    ] + AUTHENTICATION_BACKENDS

    AUTH_LDAP_CONNECTION_OPTIONS = {ldap.OPT_REFERRALS: 0}  # noqa: F405

    AUTH_LDAP_SERVER_URI = ldap_settings["server_uri"]
    AUTH_LDAP_START_TLS = ldap_settings["start_tls"]

    AUTH_LDAP_BIND_DN = ldap_settings["bind_dn"]
    AUTH_LDAP_BIND_PASSWORD = ldap_settings["bind_password"]

    AUTH_LDAP_USER_SEARCH = LDAPSearch(
        ldap_settings["user_search_base_dn"],
        ldap.SCOPE_SUBTREE,
        ldap_settings["user_search_filter_str"],  # pylint: disable=no-member
    )

    AUTH_LDAP_USER_ATTR_MAP = {
        "username": "sAMAccountName",
        "first_name": "givenName",
        "last_name": "sn",
        "email": "mail",
    }

    AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
        ldap_settings["group_search_base_dn"],
        ldap.SCOPE_SUBTREE,  # pylint: disable=no-member
        ldap_settings["group_search_filter_str"],
    )

    AUTH_LDAP_GROUP_TYPE = NestedGroupOfNamesType()

    if ldap_settings["user_flag_by_group_is_staff"]:
        AUTH_LDAP_USER_FLAGS_BY_GROUP = {
            "is_staff": LDAPGroupQuery(ldap_settings["user_flag_by_group_is_staff"]),
            "is_superuser": LDAPGroupQuery(
                ldap_settings["user_flag_by_group_is_staff"]
            ),
        }


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',
    }
}
